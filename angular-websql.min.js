angular.module("angular-websql",[]).factory("$webSql",["$log",function($log){"use strict";return{openDatabase:function(dbName,version,desc,size,debugFlag){var db,sqlDebug=debugFlag||false;if(openDatabase===undefined){throw"Browser does not support web sql"}try{db=window&&window.hasOwnProperty("sqlitePlugin")?window.sqlitePlugin.openDatabase({name:dbName}):window.openDatabase(dbName,version,desc,size);return{executeQuery:function(query,bindings,callback){if(sqlDebug===true){$log.debug("[QUERY] "+JSON.stringify(query)+" -- BINDINGS: "+JSON.stringify(bindings))}function processSuccess(tx,results){var i,cleanedResults=[];if(callback===undefined||callback===null){return}if(results&&results.hasOwnProperty("rows")&&results.rows.hasOwnProperty("length")&&results.rows.length>0){for(i=0;i<results.rows.length;i++){cleanedResults.push(results.rows.item(i))}}else if(results&&results.hasOwnProperty("rowsAffected")&&results.rowsAffected>0&&results.hasOwnProperty("insertId")){try{cleanedResults.push({insertId:results.insertId})}catch(err){$log.error(err)}}callback(cleanedResults)}function processError(errorResp){if(sqlDebug){$log.error(errorResp)}if(callback){callback([])}}db.transaction(function(tx){tx.executeSql(query,bindings,processSuccess,processError)});return this},index:function(tableName,indexName,columns,unique,callback){var query="CREATE {unique} INDEX IF NOT EXISTS `{indexName}` ON `{tableName}`({columns})";this.executeQuery(this.replace(query,{"{unique}":!!unique?"UNIQUE":"","{indexName}":indexName,"{tableName}":tableName,"{columns}":columns.join(",")}),[],callback);return this},insert:function(tableName,objToInsert,callback){var query="INSERT INTO `{tableName}` ({columns}) VALUES({values}); ",columns=Object.keys(objToInsert).join(","),values=Object.keys(objToInsert).map(function(){return"?"}).join(","),bindings=Object.keys(objToInsert).map(function(entry){return objToInsert[entry]});this.executeQuery(this.replace(query,{"{tableName}":tableName,"{columns}":columns,"{values}":values}),bindings,callback);return this},update:function(tableName,valuesToUpdate,condition,callback){var query="UPDATE `{tableName}` SET {update} WHERE {where}; ",updatePairs=Object.keys(valuesToUpdate).map(function(key){return key+" = ?"}).join(","),bindings=Object.keys(valuesToUpdate).map(function(key){return valuesToUpdate[key]}),whereCondition=this.whereClause(condition);this.executeQuery(this.replace(query,{"{tableName}":tableName,"{update}":updatePairs,"{where}":whereCondition}),bindings,callback);return this},del:function(tableName,condition,callback){var query="DELETE FROM `{tableName}` WHERE {where}; ",whereCondition=this.whereClause(condition);this.executeQuery(this.replace(query,{"{tableName}":tableName,"{where}":whereCondition}),[],callback);return this},select:function(tableName,condition,callback){var query="SELECT * FROM `{tableName}` WHERE {where}; ",whereCondition=this.whereClause(condition);this.executeQuery(this.replace(query,{"{tableName}":tableName,"{where}":whereCondition}),[],callback);return this},orderedSelect:function(tableName,condition,orderBy,ascending,callback){var query="SELECT * FROM `{tableName}` WHERE {where} ORDER BY {orderBy} {sortOrder}; ",whereCondition=this.whereClause(condition);this.executeQuery(this.replace(query,{"{tableName}":tableName,"{where}":whereCondition,"{orderBy}":orderBy,"{sortOrder}":!!ascending?"ASC":"DESC"}),[],callback);return this},limitedOrderedSelect:function(tableName,condition,orderBy,ascending,limit,callback){var query="SELECT * FROM `{tableName}` WHERE {where} ORDER BY {orderBy} {sortOrder} LIMIT {limit}; ",whereCondition=this.whereClause(condition);this.executeQuery(this.replace(query,{"{tableName}":tableName,"{where}":whereCondition,"{orderBy}":orderBy,"{sortOrder}":!!ascending?"ASC":"DESC","{limit}":limit}),[],callback);return this},selectAll:function(tableName,callback){this.executeQuery("SELECT * FROM `"+tableName+"`; ",[],callback);return this},whereClause:function(conditions){var entry,compiledWhereClause="";for(entry in conditions){if(conditions.hasOwnProperty(entry)){if(typeof conditions[entry]==="object"){if(conditions[entry].union===undefined){if(typeof conditions[entry].value==="string"&&conditions[entry].value.match(/NULL/gi)){compiledWhereClause+="`"+entry+"` "+conditions[entry].value}else{compiledWhereClause+="`"+entry+"` "+conditions[entry].operator+" "+conditions[entry].value}}else{if(typeof conditions[entry].value==="string"&&conditions[entry].value.match(/NULL/gi)){compiledWhereClause+="`"+entry+"` "+conditions[entry].value+" "+conditions[entry].union+" "}else{compiledWhereClause+="`"+entry+"` "+conditions[entry].operator+" '"+conditions[entry].value+"' "+conditions[entry].union+" "}}}else{if(typeof conditions[entry]==="string"&&conditions[entry].match(/NULL/gi)){compiledWhereClause+="`"+entry+"` "+conditions[entry]}else{compiledWhereClause+="`"+entry+"`='"+conditions[entry]+"'"}}}}return compiledWhereClause},replace:function(templateString,valuesToReplace){var entry;for(entry in valuesToReplace){if(valuesToReplace.hasOwnProperty(entry)){templateString=templateString.replace(new RegExp(entry,"ig"),valuesToReplace[entry])}}return templateString},createTable:function(tableName,fields,callback){var l,k,field,entry,query="CREATE TABLE IF NOT EXISTS `{tableName}` ({fields}); ",c=[],valuesToReplace,columns="";for(field in fields){if(fields.hasOwnProperty(field)){l="{type} {null}";columns+="`"+field+"` ";for(k in fields[field]){if(fields[field].hasOwnProperty(k)){l=l.replace(new RegExp("{"+k+"}","ig"),fields[field][k])}}columns+=l;if(fields[field].default!==undefined){columns+=" DEFAULT "+fields[field].default}if(fields[field].primary!==undefined){columns+=" PRIMARY KEY"}if(fields[field].auto_increment!==undefined){columns+=" AUTOINCREMENT"}if(Object.keys(fields)[Object.keys(fields).length-1]!==field){columns+=","}if(fields[field].primary!==undefined&&fields[field].primary){c.push(field)}}}valuesToReplace={tableName:tableName,fields:columns};for(entry in valuesToReplace){if(valuesToReplace.hasOwnProperty(entry)){query=query.replace(new RegExp("{"+entry+"}","ig"),valuesToReplace[entry])}}this.executeQuery(query,[],callback);return this},dropTable:function(tableName,callback){this.executeQuery("DROP TABLE IF EXISTS `"+tableName+"`; ",[],callback);return this}}}catch(err){console.error(err)}}}}]);